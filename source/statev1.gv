digraph CommunicationFlow {
    // Nodes representing different stages
    start_server [label="Server: Start", shape=ellipse, style=filled, fillcolor=lightblue];
    start_client [label="Client: Start", shape=ellipse, style=filled, fillcolor=lightgreen];
    server_socket_setup [label="Server: Setup Socket", shape=box];
    client_socket_creation [label="Client: Create Socket", shape=box];
    server_listen [label="Server: Listen", shape=box];
    client_connect [label="Client: Connect to Server", shape=box];
    server_accept [label="Server: Accept Connection", shape=box];
    client_send_message [label="Client: Send Message", shape=box];
    server_process_message [label="Server: Process Message", shape=box];
    client_receive_response [label="Client: Receive Response", shape=box];
    server_send_response [label="Server: Send Response", shape=box];
    client_end_communication [label="Client: End Communication", shape=ellipse, style=filled, fillcolor=lightgreen];
    server_end_communication [label="Server: End Communication", shape=ellipse, style=filled, fillcolor=lightblue];
    
    // Relationships
    start_server -> server_socket_setup;
    server_socket_setup -> server_listen;
    start_client -> client_socket_creation;
    client_socket_creation -> client_connect;
    client_connect -> server_accept;
    server_accept -> client_send_message;
    client_send_message -> server_process_message;
    server_process_message -> server_send_response;
    server_send_response -> client_receive_response;
    client_receive_response -> client_end_communication;
    server_send_response -> server_end_communication;

    // Styling
    node [style=dashed, color=gray];
    server_socket_setup -> client_socket_creation [label="Initial Communication"];
    server_listen -> client_connect [label="Connection Established"];
}
